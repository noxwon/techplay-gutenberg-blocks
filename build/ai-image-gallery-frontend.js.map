{"version":3,"file":"ai-image-gallery-frontend.js","mappings":"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","sources":["webpack://techplay-gutenberg-blocks/webpack/bootstrap","webpack://techplay-gutenberg-blocks/webpack/runtime/compat get default export","webpack://techplay-gutenberg-blocks/webpack/runtime/define property getters","webpack://techplay-gutenberg-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://techplay-gutenberg-blocks/external window \"jQuery\"","webpack://techplay-gutenberg-blocks/./src/blocks/ai-image-gallery/ai-image-gallery-frontend.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"jQuery\"];","import $ from 'jquery';\n\nconsole.log('[AI Gallery Frontend] Script Parsed (Top Level)');\n\n// import $ from 'jquery'; // <-- jQuery 주석 유지\n// import Masonry from 'masonry-layout'; // <-- Masonry\n// import imagesLoaded from 'imagesloaded'; // <-- imagesLoaded\n\nconsole.log('[AI Gallery Frontend] Reached Global Scope Test Point 1'); // <-- 전역 스코프 로그 추가\n\n// --- DOMContentLoaded 리스너 전체 라인 단위 주석 해제 ---\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('[AI Gallery Frontend] Script Loaded');\n\n    const galleries = document.querySelectorAll('.wp-block-techplay-gutenberg-blocks-ai-image-gallery');\n    console.log(`[AI Gallery Frontend] Found ${galleries.length} gallery elements.`);\n\n    galleries.forEach((galleryElement, index) => {\n        console.log(`[AI Gallery Frontend] Loop ${index}: Processing gallery element:`, galleryElement);\n        \n        try { // Start error handling block\n            const isMasonryEnabled = galleryElement.classList.contains('has-masonry-layout'); \n            console.log(`[Masonry Check] Is Masonry enabled for this gallery?`, isMasonryEnabled);\n\n            if (isMasonryEnabled) {\n                console.log('[Masonry Check] Initializing Masonry for:', galleryElement);\n                \n                imagesLoaded(galleryElement, function(instance) {\n                    console.log('[imagesLoaded] All images loaded for gallery:', galleryElement, 'Instance:', instance);\n                    \n                    // Check again if Masonry is still enabled (state might change)\n                     if (galleryElement.classList.contains('has-masonry-layout')) {\n                         const msnry = new Masonry(galleryElement, {\n                             itemSelector: '.gallery-item',\n                             percentPosition: true,\n                             gutter: parseInt(getComputedStyle(galleryElement).getPropertyValue('--gap'), 10) || 0 \n                         });\n                         console.log('[Masonry Init] Masonry instance created (WITH gutter option):', msnry);\n                         \n                         msnry.layout(); \n                         console.log('[Masonry Init] Masonry layout forced.');\n                     } else {\n                         console.log('[imagesLoaded] Masonry was disabled before initialization could complete.', galleryElement);\n                     }\n                });\n\n            } else {\n                 console.log('[Masonry Check] Masonry not enabled for gallery (no .has-masonry-layout class found in JS).', galleryElement);\n            }\n            \n            // Initialize Lightbox and Hover Actions regardless of masonry state (if applicable)\n            // Make sure these functions exist and are uncommented below\n            if (typeof initializeLightbox === 'function') {\n                initializeLightbox(galleryElement);\n                 console.log(`[Init Functions] Called initializeLightbox for gallery ${index}`);\n            }\n            if (typeof initializeHoverActions === 'function') {\n                initializeHoverActions(galleryElement);\n                 console.log(`[Init Functions] Called initializeHoverActions for gallery ${index}`);\n            }\n            \n        } catch (error) {\n            console.error('[AI Gallery Frontend] Error processing gallery:', galleryElement, error);\n            // Continue to the next gallery even if one fails\n        }\n    });\n\n    // Initialize Info Modal Close handlers separately ONCE after loop\n    if (typeof initializeInfoModalCloseHandlers === 'function') {\n        initializeInfoModalCloseHandlers();\n    }\n\n    console.log('[AI Gallery Frontend] Finished processing all galleries.');\n});\n// --- DOMContentLoaded 리스너 전체 라인 단위 주석 끝 ---\n\nconsole.log('[AI Gallery Frontend] Reached Global Scope Test Point 2'); // <-- 전역 스코프 로그 추가\n\n// --- Helper Functions --- \n// Remove comments from all function definitions below\n\n// Function to parse SD parameters (Revised v5 - Attempt to fix parsing)\nfunction parseSDParameters(paramsString, promptString) {\n    const result = { positive: promptString || '', negative: '', params: {} };\n    if (!paramsString || typeof paramsString !== 'string') {\n        // If paramsString is empty but promptString exists, use it as positive\n        return result;\n    }\n\n    // Normalize potential JSON embedded data\n    try {\n        // Handle escaped quotes common in data attributes\n        const potentialJson = paramsString.replace(/&quot;/g, '\"');\n        if (potentialJson.trim().startsWith('{') && potentialJson.trim().endsWith('}')) {\n            const jsonData = JSON.parse(potentialJson);\n            result.positive = jsonData.prompt || result.positive;\n            result.negative = jsonData.negativePrompt || '';\n            result.params = jsonData; // Put the whole parsed object in params for now\n            // Remove keys we handled separately\n            delete result.params.prompt;\n            delete result.params.negativePrompt;\n            console.log(\"[Parser] Parsed parameters as JSON:\", result);\n            return result;\n        } \n    } catch (e) {\n        console.warn(\"[Parser] Failed to parse parameters as JSON, falling back to text:\", e);\n    }\n    \n    // --- Text Parsing Fallback --- \n    const lines = paramsString.split('\\n');\n    let currentKey = 'positive'; // Start with positive prompt unless already provided\n    let parametersPart = '';\n\n    if (result.positive) { // If prompt came from data-prompt\n        currentKey = 'params';\n    }\n\n    lines.forEach(line => {\n        const trimmedLine = line.trim();\n        if (!trimmedLine) return;\n\n        if (trimmedLine.startsWith('Negative prompt:')) {\n            result.negative = trimmedLine.substring('Negative prompt:'.length).trim();\n            currentKey = 'negative';\n        } else if (trimmedLine.includes(':') && trimmedLine.match(/^Steps: \\d+, Sampler: .+/)) {\n            parametersPart = trimmedLine; // Assume this is the start of key-value pairs\n            currentKey = 'params';\n        } else {\n            if (currentKey === 'negative') {\n                result.negative += ' ' + trimmedLine;\n            } else if (currentKey === 'positive') {\n                result.positive += (result.positive ? '\\n' : '') + trimmedLine;\n            } else if (currentKey === 'params') {\n                 parametersPart += ', ' + trimmedLine; // Append to parameters string\n            }\n        }\n    });\n    \n    // Parse the key-value string\n    if (parametersPart) {\n        // Match key: value pairs, handling potential commas in values but not keys\n        const regex = /(\\w+(?:\\s+\\w+)*?):\\s*(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|[^,]+(?:,\\s*(?![A-Za-z\\s]+:))?)/g;\n        let match;\n        while ((match = regex.exec(parametersPart)) !== null) {\n            const key = match[1].trim();\n            let value = match[2].trim();\n            // Remove trailing comma if present\n            if (value.endsWith(',')) {\n                value = value.slice(0, -1).trim();\n            }\n            // Remove surrounding quotes if value is a quoted string\n            if (value.startsWith('\"') && value.endsWith('\"')) {\n                value = value.slice(1, -1);\n            }\n            result.params[key] = value;\n        }\n    }\n\n    result.positive = result.positive.trim();\n    result.negative = result.negative.trim();\n\n    console.log(\"[Parser] Parsed as Text (v5):\", result);\n    return result;\n}\n\n// Function to display info modal (Adjust HTML generation)\nfunction displayInfoModal(parameters, prompt) {\n    let $modal = $('#ai-gallery-info-modal'); \n\n    // Create modal if it doesn't exist\n    if ($modal.length === 0) {\n        console.log('[Info Modal] Creating modal element.');\n        $('body').append(`\n            <div id=\"ai-gallery-info-modal\" class=\"ai-image-modal\" style=\"display: none;\">\n                <div class=\"modal-content\">\n                    <button class=\"close-button\" title=\"Close\">&times;</button>\n                    <div class=\"image-meta\"></div>\n                </div>\n            </div>\n        `);\n        $modal = $('#ai-gallery-info-modal'); // Re-select the modal\n\n        // Attach close handlers only when creating the modal\n        $modal.on('click', function(e) {\n            if ($(e.target).is($modal) || $(e.target).closest('.close-button').length) {\n                console.log('[Info Modal Close] Closing via click.');\n                $modal.fadeOut(300); \n            }\n        });\n        console.log('[Info Modal] Close handlers attached.');\n    }\n\n    const $metaContainer = $modal.find('.image-meta');\n    let html = '<h3>Image Generation Details</h3>';\n\n    const parsedData = parseSDParameters(parameters, prompt);\n\n    // Display Positive Prompt\n    if (parsedData.positive) {\n        html += `<div class=\"meta-section\"><h4>Positive Prompt</h4><div class=\"prompt-box positive\"><p>${escapeHtml(parsedData.positive)}</p></div></div>`;\n    } \n    // Display Negative Prompt\n    if (parsedData.negative) {\n        html += `<div class=\"meta-section\"><h4>Negative Prompt</h4><div class=\"prompt-box negative\"><p>${escapeHtml(parsedData.negative)}</p></div></div>`;\n    }\n    // Display Other Parameters\n    const otherParamsKeys = Object.keys(parsedData.params);\n    if (otherParamsKeys.length > 0) {\n        html += '<div class=\"meta-section generation-details-section\"><h4>Parameters</h4>';\n        otherParamsKeys.forEach(key => {\n             // Ensure we don't re-display prompt/negative prompt if they ended up in params\n             if (key.toLowerCase() !== 'prompt' && key.toLowerCase() !== 'negative prompt') {\n                 html += `<p><strong>${escapeHtml(key)}:</strong> ${escapeHtml(parsedData.params[key])}</p>`;\n             }\n        });\n        html += '</div>';\n    } else if (!parsedData.positive && !parsedData.negative) {\n         html += '<div class=\"meta-section generation-details-section\"><h4>Parameters</h4><p>No specific parameters found.</p></div>';\n    }\n    \n    // Display Civitai Resources (assuming parsedData.params contains this key)\n    if (parsedData.params['Civitai resources'] && typeof parsedData.params['Civitai resources'] === 'string') { // Check if it's a string needing parsing\n        try {\n            const resources = JSON.parse(parsedData.params['Civitai resources'].replace(/&quot;/g, '\"')); // Handle escaped quotes\n            if (Array.isArray(resources)) {\n                 html += `<div class=\"meta-section civitai-resources-section\"><h4>Civitai Resources</h4>`;\n                resources.forEach(resource => {\n                    html += `<p><strong>Type:</strong> ${escapeHtml(resource.type || 'N/A')}, `;\n                    if(resource.modelName && resource.modelVersionName) {\n                         html += `<strong>Name:</strong> ${escapeHtml(resource.modelName)} (${escapeHtml(resource.modelVersionName)}), `;\n                    } else if (resource.modelName) {\n                        html += `<strong>Name:</strong> ${escapeHtml(resource.modelName)}, `;\n                    }\n                    if(resource.weight !== undefined) { // Check for undefined explicitly\n                        html += `<strong>Weight:</strong> ${escapeHtml(resource.weight)}`;\n                    }\n                     html += `</p>`;\n                });\n                 html += `</div>`;\n            }\n        } catch (e) {\n            console.error(\"Error parsing Civitai resources:\", e);\n             // Optionally display the raw string if parsing fails\n             html += `<div class=\"meta-section civitai-resources-section\"><h4>Civitai Resources (Raw)</h4><pre>${escapeHtml(parsedData.params['Civitai resources'])}</pre></div>`;\n        }\n    }\n\n    $metaContainer.html(html);\n    console.log(\"[displayInfoModal] HTML set. Fading in...\");\n    $modal.css('display', 'flex').hide().fadeIn(300);\n}\n\nfunction escapeHtml(unsafe) {\n    if (typeof unsafe !== 'string') return unsafe; \n    return unsafe\n         .replace(/&/g, \"&amp;\")\n         .replace(/</g, \"&lt;\")\n         .replace(/>/g, \"&gt;\")\n         .replace(/\"/g, \"&quot;\")\n         .replace(/'/g, \"&#039;\");\n }\n\nfunction initializeLightbox(galleryElement) {\n    if (!galleryElement.classList.contains('has-lightbox')) return;\n\n    let lightboxModal = document.getElementById('ai-gallery-lightbox-modal');\n    if (!lightboxModal) {\n        lightboxModal = document.createElement('div');\n        lightboxModal.id = 'ai-gallery-lightbox-modal';\n        lightboxModal.innerHTML = `\n            <div class=\"modal-content\">\n                <figure>\n                    <img src=\"\" alt=\"\" id=\"lightbox-image\">\n                </figure>\n                <button class=\"close-button\" title=\"Close lightbox\">\n                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" width=\"18\" height=\"18\">\n                        <path d=\"M6.28 5.22a.75.75 0 0 0-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 1 0 1.06 1.06L10 11.06l3.72 3.72a.75.75 0 1 0 1.06-1.06L11.06 10l3.72-3.72a.75.75 0 0 0-1.06-1.06L10 8.94 6.28 5.22Z\" />\n                     </svg>\n                </button>\n            </div>\n        `;\n        lightboxModal.querySelector('.close-button').addEventListener('mousedown', (e) => { \n            e.stopPropagation(); \n            console.log('[Listener Debug] Lightbox CLOSE BUTTON mousedown!'); \n            lightboxModal.style.display = 'none';\n        });\n        lightboxModal.addEventListener('mousedown', (e) => { \n            console.log('[Listener Debug] Lightbox OVERLAY mousedown (target, modal): ', e.target, lightboxModal);\n            if (e.target === lightboxModal) { \n                lightboxModal.style.display = 'none';\n            }\n        });\n        document.body.appendChild(lightboxModal);\n    }\n\n    const lightboxImage = lightboxModal.querySelector('#lightbox-image');\n\n    galleryElement.querySelectorAll('.gallery-item img').forEach(img => {\n        img.style.cursor = 'pointer';\n        img.addEventListener('click', (e) => {\n            if (e.target.closest('button')) return;\n            \n            const largeSrc = e.target.dataset.largeSrc || e.target.src;\n            const altText = e.target.alt || '';\n            lightboxImage.src = largeSrc;\n            lightboxImage.alt = altText;\n            lightboxModal.style.display = 'flex';\n            console.log('[Lightbox] Image clicked, opening via style.');\n        });\n    });\n}\n\n// NEW function to setup info modal close handlers ONCE\nfunction initializeInfoModalCloseHandlers() {\n    const infoModal = document.getElementById('ai-gallery-info-modal');\n    if (infoModal && !infoModal.dataset.closeHandlerAttached) {\n        console.log('[Info Modal] Attaching close handlers.');\n        const closeButton = infoModal.querySelector('.close-button');\n        if (closeButton) {\n            closeButton.addEventListener('mousedown', (e) => { \n                e.stopPropagation(); \n                console.log('[Listener Debug] Info Modal CLOSE BUTTON mousedown!'); \n                infoModal.style.display = 'none'; \n            });\n        }\n        infoModal.addEventListener('mousedown', (e) => { \n            console.log('[Listener Debug] Info Modal OVERLAY mousedown (target, modal): ', e.target, infoModal);\n            if (e.target === infoModal) {\n                infoModal.style.display = 'none';\n            }\n        });\n        infoModal.dataset.closeHandlerAttached = 'true'; \n    } else if (infoModal) {\n         console.log('[Info Modal] Close handlers already attached.');\n    } else {\n         console.error('[Info Modal] Cannot attach close handlers, modal not found.');\n    }\n}\n\nfunction initializeHoverActions(galleryElement) {\n     console.log('[Hover Actions] Initializing for gallery:', galleryElement);\n     const items = galleryElement.querySelectorAll('.gallery-item');\n     console.log(`[Hover Actions] Found ${items.length} items`);\n\n    items.forEach((item, itemIndex) => {\n        const infoButton = item.querySelector('.image-info-icon');\n        const copyButton = item.querySelector('.copy-url-button');\n        const downloadButton = item.querySelector('.download-image-button');\n        const img = item.querySelector('img');\n        \n        // Log found elements for debugging\n        console.log(`[Hover Actions] Item ${itemIndex}: InfoBtn:`, infoButton, `CopyBtn:`, copyButton, `DlBtn:`, downloadButton, `Img:`, img);\n\n        if (infoButton) {\n             console.log(`[Hover Actions] Item ${itemIndex}: Adding click listener to infoButton`);\n            infoButton.addEventListener('click', (e) => {\n                 console.log(`[Hover Actions] Item ${itemIndex}: Info button clicked!`);\n                 e.stopPropagation(); \n                 if (typeof displayInfoModal === 'function') {\n                    displayInfoModal(img.dataset.parameters, img.dataset.prompt);\n                 } else {\n                     console.error('displayInfoModal function not found!');\n                 }\n            });\n        } else {\n            console.log(`[Hover Actions] Item ${itemIndex}: Info button not found.`);\n        }\n        \n        if (copyButton && img) {\n             console.log(`[Hover Actions] Item ${itemIndex}: Adding click listener to copyButton`);\n            copyButton.addEventListener('click', (e) => {\n                 console.log(`[Hover Actions] Item ${itemIndex}: Copy button clicked!`);\n                 e.stopPropagation();\n                const imageUrl = img.dataset.largeSrc || img.src;\n                navigator.clipboard.writeText(imageUrl).then(() => {\n                    copyButton.classList.add('copied');\n                    setTimeout(() => copyButton.classList.remove('copied'), 1500);\n                }).catch(err => {\n                    console.error('Failed to copy URL: ', err);\n                });\n            });\n        } else {\n             console.log(`[Hover Actions] Item ${itemIndex}: Copy button or image not found.`);\n        }\n\n        if (downloadButton && img) {\n             console.log(`[Hover Actions] Item ${itemIndex}: Adding click listener to downloadButton`);\n            downloadButton.addEventListener('click', (e) => {\n                 console.log(`[Hover Actions] Item ${itemIndex}: Download button clicked!`);\n                 e.stopPropagation();\n                const imageUrl = img.dataset.largeSrc || img.src;\n                const link = document.createElement('a');\n                link.href = imageUrl;\n                const filename = imageUrl.substring(imageUrl.lastIndexOf('/') + 1).split('?')[0] || 'download.jpg';\n                link.download = filename;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n            });\n        } else {\n            console.log(`[Hover Actions] Item ${itemIndex}: Download button or image not found.`);\n        }\n    });\n}\n// Ensure functions are defined before being called\n// --- Helper Functions --- "],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","window","escapeHtml","unsafe","replace","initializeHoverActions","galleryElement","console","log","items","querySelectorAll","concat","length","forEach","item","itemIndex","infoButton","querySelector","copyButton","downloadButton","img","addEventListener","e","stopPropagation","parameters","prompt","$modal","$","append","on","target","is","closest","fadeOut","$metaContainer","find","html","parsedData","paramsString","promptString","result","positive","negative","params","potentialJson","trim","startsWith","endsWith","jsonData","JSON","parse","negativePrompt","warn","lines","split","currentKey","parametersPart","line","trimmedLine","substring","includes","match","regex","exec","value","slice","parseSDParameters","otherParamsKeys","keys","toLowerCase","resources","Array","isArray","resource","type","modelName","modelVersionName","undefined","weight","error","css","hide","fadeIn","displayInfoModal","dataset","imageUrl","largeSrc","src","navigator","clipboard","writeText","then","classList","add","setTimeout","remove","err","link","document","createElement","href","filename","lastIndexOf","download","body","appendChild","click","removeChild","galleries","index","isMasonryEnabled","contains","imagesLoaded","instance","msnry","Masonry","itemSelector","percentPosition","gutter","parseInt","getComputedStyle","getPropertyValue","layout","lightboxModal","getElementById","id","innerHTML","style","display","lightboxImage","cursor","altText","alt","initializeLightbox","infoModal","closeHandlerAttached","closeButton","initializeInfoModalCloseHandlers"],"sourceRoot":""}